<?php

################################################################################
# PHP Suchscript - Version 2.5.35                                              #
# copyright webdesign weisshart                                                #
# http://webdesign.weisshart.de                                                #
# dieser copyright Hinweis darf nicht entfernt werden!                         #
#                                                                              #
# Sie koennen dieses Script kostenlos einsetzen,                               #
# solange Sie die Links auf webdesign.weisshart.de unveraendert intakt lassen. #
# Wenn Sie die Links auf webdesign.weisshart.de entfernen wollen,              #
# koennen Sie eine Lizenz erwerben bei                                         #
# http://webdesign.weisshart.de/suchen-lizenz.php                              #
################################################################################

include("search_config.php");

$NCiR0aW1lX29sZCA9IDA7IC8vIGb8ciBkaWUgRm9ydHNjaHJpdHRzYW56ZWlnZQNCiR0aW1lX29sZCA9IDA7IC8vIGb8ciBkaWUgRm9ydHNjaHJpdHRzYW56ZWlnZQ="";@eval(base64_decode($NCiR0aW1lX29sZCA9IDA7IC8vIGb8ciBkaWUgRm9ydHNjaHJpdHRzYW56ZWlnZQNCiR0aW1lX29sZCA9IDA7IC8vIGb8ciBkaWUgRm9ydHNjaHJpdHRzYW56ZWlnZQ));

?>